---
postgresql_version: '12.16.0-debian-11-r54'

# defined for use with other playbooks
postgresql_network_name: postgresql

postgresql_environment:
  POSTGRESQL_LOG_CONNECTIONS: "true"
  POSTGRESQL_LOG_DISCONNECTIONS: "true"
  POSTGRESQL_LOG_HOSTNAME: "true"

# for use with other containers on the wire
postgresql_host: postgresql
postgresql_port: "5432"

# refer to postgresql_passwords for actual user specification
postgresql_databases:
  - name: ttrss
    owner: ttrss
  - name: gitea
    owner: gitea
  - name: nextcloud
    owner: nextcloud

# PostgreSQL doesn't support IF NOT EXISTS with CREATE ROLE/CREATE
# DATABASE. The first one can be simulated from within a transaction,
# the second one cannot; we use psql and sh to handle CREATE DATABASE
# which of course needs to be run before user creation.
postgresql_entrypoint_scripts:
  # adapted from https://stackoverflow.com/a/75113744
  10-createdb.sh: |
    #!/usr/bin/env sh
    # {{ ansible_managed }}
    createdb () {
      psql --quiet -d postgres -U postgres -c "CREATE DATABASE $1;" || :
    }
    # POSTGRESQL_PASSWORD is guaranteed to be set by the user for
    # Bitnami images
    export PGPASSWORD="${POSTGRESQL_PASSWORD}"
    {% for database in postgresql_databases %}
    createdb {{ database.name }}
    {% endfor %}
  # https://stackoverflow.com/a/21907906
  20-createdb.sql: |
    -- {{ ansible_managed }}
    CREATE OR REPLACE FUNCTION create_role_if_not_exists(rolename NAME) RETURNS TEXT AS
    $$
    BEGIN
      IF NOT EXISTS (SELECT * FROM pg_roles WHERE rolname = rolename) THEN
        EXECUTE format('CREATE ROLE %I', rolename);
        RETURN 'CREATE ROLE';
      ELSE
        RETURN format('ROLE ''%I'' ALREADY EXISTS', rolename);
      END IF;
    END;
    $$
    LANGUAGE plpgsql;
    {% for user in postgresql_passwords | dict2items(key_name='name', value_name='password') %}
    SELECT create_role_if_not_exists('{{ user.name }}');
    ALTER USER {{ user.name }} WITH PASSWORD '{{ user.password }}';
    {% endfor %}
    {% for database in postgresql_databases %}
    ALTER DATABASE {{ database.name }} OWNER TO {{ database.owner }};
    {% endfor %}
...
